{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","handleFile","csv","setState","courses","prevState","props","pop","state","id","className","cssClass","onFileLoaded","this","onError","handleDarkSideForce","inputId","inputStyle","color","map","courseData","i","key","data","React","Component","Course","ratingDiv","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8NAGMA,E,YACH,aAAe,IAAD,8BACX,+CAWHC,WAAa,SAAAC,GACZ,EAAKC,SAAS,CAACC,QAASF,IAExB,EAAKC,UAAS,SAACE,EAAWC,GACxB,OAAOD,EAAUD,QAAQG,UARzB,EAAKC,MAAQ,CACVJ,QAAS,IATD,E,sEAqBX,OACG,6BACC,wBAAIK,GAAI,QAAR,eACA,uBAAGC,UAAU,SAAb,+BACA,yBAAKA,UAAY,SACjB,kBAAC,IAAD,CACEC,SAAS,mBACTC,aAAcC,KAAKZ,WACnBa,QAASD,KAAKE,oBACdC,QAAQ,aACRC,WAAY,CAACC,MAAO,UAIrB,yBAAKR,UAAU,mBACZG,KAAKL,MAAMJ,QAAQe,KAAI,SAACC,EAAYC,GAAb,OAAmB,kBAAC,EAAD,CACzCC,IAAOD,EAAGE,KAAQH,a,GAtCfI,IAAMC,WA6ClBC,E,iLAEF,IAAIC,EASF,OAPAA,EADEd,KAAKP,MAAMiB,KAAK,GACN,yBAAKb,UAAU,UAAf,MACZ,yBAAKA,UAAY,cAAjB,IAAgCG,KAAKP,MAAMiB,KAAK,GAAhD,KACA,yBAAKb,UAAU,QAAf,gBAAoCG,KAAKP,MAAMiB,KAAK,KAGxC,yBAAKb,UAAU,UAAf,cAGT,yBAAKA,UAAU,UACZ,yBAAKA,UAAU,cAAcD,GAAG,cAAhC,IAA+CI,KAAKP,MAAMiB,KAAK,GAA/D,IAAoEV,KAAKP,MAAMiB,KAAK,GAApF,MAA2FV,KAAKP,MAAMiB,KAAK,GAA3G,KACA,yBAAKb,UAAU,WAAf,UAAiCG,KAAKP,MAAMiB,KAAK,GAAjD,KAEEI,EAEF,yBAAKjB,UAAU,QAAf,cAAkCG,KAAKP,MAAMiB,KAAK,IAClD,yBAAKb,UAAU,QAAf,IAAwBG,KAAKP,MAAMiB,KAAK,GAAxC,U,GAnBSC,IAAMC,WA0BZzB,IC9DK4B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.7190fbfe.chunk.js","sourcesContent":["import React from 'react';\nimport CSVReader from 'react-csv-reader';\n\nclass App extends React.Component {\n   constructor() {\n      super();\n      // 1. bot scrapes web data\n      // 2. bot saves data as csv to desktop\n      // 3. bot navigates to website (this, hosted on github(?))\n      // 4. bot uploads csv\n      // 5. You get to see data about courses\n    \n      this.state = {\n         courses: []\n      }\n   }\n   handleFile = csv => {\n    this.setState({courses: csv});\n    // delete that random empty element in array\n    this.setState((prevState, props) => {\n      return prevState.courses.pop();\n    })\n   }\n\n   render() {\n      return (\n         <div>\n          <h1 id= \"head\">Course Data</h1>\n          <p className=\"intro\">Select CSV with course data</p>\n          <div className = \"intro\">\n          <CSVReader\n            cssClass=\"csv-reader-input\"\n            onFileLoaded={this.handleFile}\n            onError={this.handleDarkSideForce}\n            inputId=\"courseData\"\n            inputStyle={{color: 'red'}}\n            />\n          </div>\n          \n           <div className=\"courseContainer\">\n             {this.state.courses.map((courseData, i) => <Course \n               key = {i} data = {courseData}/>)}\n           </div>\n         </div>\n      );\n   }\n}\n\nclass Course extends React.Component {\n   render() {\n    let ratingDiv;\n    if (this.props.data[5]) {\n      ratingDiv = <div className=\"rating\" >rmp\n      <div className = \"mainRating\"> {this.props.data[5]} </div>\n      <div className=\"diff\"> difficulty: {this.props.data[6]}</div>\n      </div>\n    } else {\n      ratingDiv = <div className=\"rating\">Recitation</div>\n    }\n      return (\n         <div className=\"course\">\n            <div className=\"courseTitle\" id=\"spaceTitle\"> {this.props.data[0]} {this.props.data[1]} - {this.props.data[2]} </div>\n            <div className=\"teacher\"> Prof. {this.props.data[4]} </div>\n            \n             {ratingDiv}\n\n            <div className=\"days\"> meetings: {this.props.data[3]}</div>\n            <div className=\"time\"> {this.props.data[7]} </div>\n          \n         </div>\n      );\n   }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}